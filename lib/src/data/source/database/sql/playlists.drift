import 'records.drift';
import 'users.drift';

-- Tables
CREATE VIEW local_playlists AS
SELECT 
    *,
    CAST(json_extract(data, '$.name') as TEXT) AS name,
    CASE WHEN json_extract(data, '$.description') IS NOT NULL THEN CAST(json_extract(data, '$.description') AS TEXT) ELSE NULL END AS description,
    CASE WHEN json_extract(data, '$.public') IS NOT NULL THEN CAST(json_extract(data, '$.public') AS BOOLEAN) ELSE NULL END AS public,
    CASE WHEN json_extract(data, '$.medly') IS NOT NULL THEN CAST(json_extract(data, '$.medly') AS BOOLEAN) ELSE NULL END AS medly,
    CASE WHEN json_extract(data, '$.supplement') IS NOT NULL THEN CAST(json_extract(data, '$.supplement') AS BOOLEAN) ELSE NULL END AS supplement,
    CASE WHEN json_extract(data, '$.event') IS NOT NULL THEN CAST(json_extract(data, '$.event') AS TEXT) ELSE NULL END AS [event]
FROM user_records
WHERE collection_name = 'public_playlists'
OR collection_name = 'playlists';

CREATE VIEW playlists AS
SELECT * FROM local_playlists
WHERE collection_name = 'playlists';

CREATE VIEW public_playlists AS
SELECT * FROM local_playlists
WHERE collection_name = 'public_playlists'
OR (collection_name = 'playlists' AND public = 1);

-- Queries
getPlaylists:
SELECT * FROM playlists
WHERE user = :user
ORDER BY updated DESC;

getPlaylist:
SELECT * FROM playlists
WHERE user = :user
AND id = :id;

getPublicPlaylists:
SELECT * FROM public_playlists
WHERE deleted != 1
ORDER BY updated DESC;

getPublicPlaylist:
SELECT * FROM public_playlists
WHERE id = :id;

getPlaylistByUserAndId:
SELECT * FROM playlists
WHERE user = :user
AND id = :id;

getPublicPlaylistByUserAndId:
SELECT * FROM public_playlists
WHERE user = :user
AND id = :id;
