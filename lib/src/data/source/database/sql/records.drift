import 'users.drift';

-- Tables
CREATE TABLE records (
    data TEXT NOT NULL,
    id TEXT GENERATED ALWAYS AS (json_extract(data, '$.id')) VIRTUAL NOT NULL,
    collection_id TEXT GENERATED ALWAYS AS (json_extract(data, '$.collectionId')) VIRTUAL NOT NULL,
    collection_name TEXT GENERATED ALWAYS AS (json_extract(data, '$.collectionName')) VIRTUAL NOT NULL,
    created DATETIME GENERATED ALWAYS AS (json_extract(data, '$.created')) VIRTUAL NOT NULL,
    updated DATETIME GENERATED ALWAYS AS (json_extract(data, '$.updated')) VIRTUAL NOT NULL,
    deleted BOOLEAN GENERATED ALWAYS AS (json_extract(data, '$.deleted')) VIRTUAL,
    synced BOOLEAN NOT NULL DEFAULT 0,
    fresh BOOLEAN,
    UNIQUE(id, collection_name)
);

CREATE VIEW user_records AS
SELECT 
    *,
    CASE WHEN json_extract(data, '$.user') IS NOT NULL THEN CAST(json_extract(data, '$.user') AS TEXT) ELSE NULL END AS user,
    CASE WHEN json_extract(data, '$.uid') IS NOT NULL THEN CAST(json_extract(data, '$.uid') AS TEXT) ELSE NULL END AS uid
FROM records;

CREATE TRIGGER user_records_users_delete_trigger
AFTER DELETE ON users
FOR EACH ROW
BEGIN
    DELETE FROM user_records
    WHERE user = OLD.id;
END;

CREATE TABLE records_cache (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    collection TEXT NOT NULL,
    synced BOOLEAN NOT NULL DEFAULT 0,
    created DATETIME NOT NULL,
    updated DATETIME NOT NULL,
    UNIQUE (collection)
);

-- Full Text Search
CREATE VIRTUAL TABLE records_fts USING fts5 (
    data,
    content=records,
    content_rowid=id
);
CREATE TRIGGER records_fts_insert
AFTER INSERT ON records
BEGIN
    INSERT INTO records_fts (rowid, data)
    VALUES (new.ROWID, new.data);
END;

CREATE TRIGGER records_fts_update
AFTER UPDATE ON records
BEGIN
    UPDATE records_fts
    SET data = new.data
    WHERE rowid = old.ROWID;
END;

CREATE TRIGGER records_fts_delete
AFTER DELETE ON records
BEGIN
    INSERT INTO records_fts (records_fts, rowid, data)
    VALUES ('delete', old.ROWID, old.data);
END;

-- Indexes
CREATE INDEX records_idx_data ON records (data);

getRecordModels:
SELECT * FROM records;

getRecordModel:
SELECT * FROM records
WHERE id = :id;

getRecordModelsByCollection:
SELECT * FROM records
WHERE collection_id = :collection OR collection_name = :collection;

getRecordModelByCollection:
SELECT * FROM records
WHERE (collection_id = :collection OR collection_name = :collection)
AND id = :id;

setRecordModel:
REPLACE INTO records (data, synced, fresh)
VALUES (:data, :synced, :fresh)
RETURNING *;

createRecordModel:
INSERT OR REPLACE INTO records (data, synced, fresh)
VALUES (:data, :synced, 1)
RETURNING *;

updateRecordModel:
UPDATE records
SET data = :data, synced = :synced
WHERE id = :id
AND (collection_id = :collection OR collection_name = :collection);

deleteRecordModel:
UPDATE records
SET data = json_set(data,'$.deleted', IFNULL(json_extract(data, '$.deleted'), 0) + 1)
WHERE id = :id
AND (collection_id = :collection OR collection_name = :collection);

undoDeleteRecordModel:
UPDATE records
SET data = json_set(data,'$.deleted', IFNULL(json_extract(data, '$.deleted'), 1) - 1)
WHERE id = :id
AND (collection_id = :collection OR collection_name = :collection);

getDeletedRecordModels:
SELECT * FROM records
WHERE deleted = 1;

getDeletedRecordModelsByCollection:
SELECT * FROM records
WHERE deleted = 1
AND (collection_id = :collection OR collection_name = :collection);

setSyncStatusRecordModel:
UPDATE records
SET synced = :synced
WHERE id = :id
AND (collection_id = :collection OR collection_name = :collection);

setFreshStatusRecordModel:
UPDATE records
SET fresh = :fresh
WHERE id = :id
AND (collection_id = :collection OR collection_name = :collection);

deleteRecordModelByCollection:
DELETE FROM records
WHERE collection_id = :collection OR collection_name = :collection;

deleteRecordModelByCollectionAndId:
DELETE FROM records
WHERE (collection_id = :collection OR collection_name = :collection)
AND id = :id;

deleteAllRecordModels:
DELETE FROM records;

getCollectionSyncedStatus:
SELECT * FROM records_cache
WHERE collection = :collection;

setCollectionSyncedStatus:
INSERT OR REPLACE INTO records_cache (collection, synced, created, updated)
VALUES (:collection, :synced, :created, :updated);

deleteOldRecords:
DELETE FROM records
WHERE deleted = 1 AND updated > :date;

findLegacyRecords:
SELECT * FROM user_records
WHERE uid IS NOT NULL AND uid = :uid 
AND (user IS NULL OR user = '') 
AND (collection_name IN :collections OR collection_id IN :collections);

getUnsyncedUserRecords:
SELECT * FROM user_records
WHERE synced = 0
AND (collection_name IN :collections OR collection_id IN :collections);

getUnsyncedRecordsByUser:
SELECT * FROM user_records
WHERE synced = 0
AND (user = :user OR uid = :user)
AND collection_name != 'users';

searchRecords:
SELECT 
	r.id,
    r.collection_id,
    r.collection_name,
    highlight(records_fts, 2, '<b>', '</b>') data,
    r.created,
    r.updated
FROM records_fts 
INNER JOIN records AS r
	ON r.id = records_fts.ROWID
WHERE records_fts MATCH :query
ORDER BY rank;
